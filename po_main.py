# -*- coding: utf-8 -*-
"""po_main (2) (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M43-k0uwF786_gUlRTxJ5BbAgykNOu-x
"""

import pandas as pd

data = pd.read_csv('/content/data.csv')

print(data.head())

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Function to preprocess the data and extract features
def preprocess_data(data):
    # Here, you can preprocess the data, select relevant features,
    # handle missing values, and encode categorical variables
    # For simplicity, let's select 'cost' as a feature
    X = data[['cost']]  # Selecting 'cost' as the feature
    y = data['price']   # Selecting 'price' as the target variable
    return X, y

# Main function to recommend price using OLS technique
def RecommendPrice_OLS(sku_id, data):
    # Filter data based on sku_id if necessary
    filtered_data = data[data['sku_id'] == sku_id]

    # Preprocess the filtered data
    X, y = preprocess_data(filtered_data)

    # Split data into train and test sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Train OLS model
    ols_model = LinearRegression()
    ols_model.fit(X_train, y_train)

    # Make predictions
    y_pred = ols_model.predict(X_test)

    # Evaluate model performance
    rmse = mean_squared_error(y_test, y_pred, squared=False)

    # Print and return results
    print("Root Mean Squared Error (RMSE) using OLS technique:", rmse)

    # Return recommended price (example: using first test data point)
    recommended_price = ols_model.predict([X_test.iloc[0]])[0]
    return recommended_price

# Example usage
sku_id = 0
recommended_price_ols = RecommendPrice_OLS(sku_id, data)
print("Recommended Price using OLS technique:", recommended_price_ols)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error

# Function to preprocess the data and extract features
def preprocess_data(data):
    # Here, you can preprocess the data, select relevant features,
    # handle missing values, and encode categorical variables
    # For simplicity, let's select 'cost' as a feature
    X = data[['cost']]  # Selecting 'cost' as the feature
    y = data['price']   # Selecting 'price' as the target variable
    return X, y

# Main function to train and evaluate Neural Network models one by one
def RecommendPrice_NeuralNetworks(sku_id, data):
    # Filter data based on sku_id if necessary
    filtered_data = data[data['sku_id'] == sku_id]

    # Preprocess the filtered data
    X, y = preprocess_data(filtered_data)

    # Split data into train and test sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Standardize features
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    # Train first Neural Network model
    model1 = MLPRegressor(hidden_layer_sizes=(100,50), max_iter=500)
    model1.fit(X_train_scaled, y_train)

    # Evaluate first model
    y_pred1 = model1.predict(X_test_scaled)
    rmse1 = mean_squared_error(y_test, y_pred1, squared=False)
    print("RMSE for Model 1:", rmse1)

    # Train second Neural Network model
    model2 = MLPRegressor(hidden_layer_sizes=(50,50,50), max_iter=500)
    model2.fit(X_train_scaled, y_train)

    # Evaluate second model
    y_pred2 = model2.predict(X_test_scaled)
    rmse2 = mean_squared_error(y_test, y_pred2, squared=False)
    print("RMSE for Model 2:", rmse2)

    # Train third Neural Network model
    model3 = MLPRegressor(hidden_layer_sizes=(200,100,50), max_iter=500)
    model3.fit(X_train_scaled, y_train)

    # Evaluate third model
    y_pred3 = model3.predict(X_test_scaled)
    rmse3 = mean_squared_error(y_test, y_pred3, squared=False)
    print("RMSE for Model 3:", rmse3)

    # Compare performances and select the best model
    best_model = None
    best_rmse = float('inf')
    for name, model, rmse in [('Model 1', model1, rmse1), ('Model 2', model2, rmse2), ('Model 3', model3, rmse3)]:
        if rmse < best_rmse:
            best_model = model
            best_rmse = rmse
            best_model_name = name

    # Print and return results
    print("Best Model:", best_model_name)

    # Return recommended price using the best model (example: using first test data point)
    recommended_price = best_model.predict([X_test_scaled[0]])[0]
    return recommended_price

# Example usage
sku_id = 0
recommended_price_nn = RecommendPrice_NeuralNetworks(sku_id, data)
print("Recommended Price using Neural Network:", recommended_price_nn)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error

# Function to preprocess the data and extract features
def preprocess_data(data):
    # Here, you can preprocess the data, select relevant features,
    # handle missing values, and encode categorical variables
    # For simplicity, let's select 'cost' as a feature
    X = data[['cost']]  # Selecting 'cost' as the feature
    y = data['price']   # Selecting 'price' as the target variable
    return X, y

# Main interface function to recommend price
def RecommendPrice(itemID, data_path, Time, Date):
    # Filter data based on id, time, and date if necessary
    filtered_data = data[data['id'] == itemID]

    # Preprocess the filtered data
    X, y = preprocess_data(filtered_data)

    # Split data into train and test sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Standardize features
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    # Train a Neural Network model
    nn_model = MLPRegressor(hidden_layer_sizes=(100,50), max_iter=500)
    nn_model.fit(X_train_scaled, y_train)

    # Make predictions
    y_pred = nn_model.predict(X_test_scaled)

    # Evaluate model performance
    rmse = mean_squared_error(y_test, y_pred, squared=False)
    print("Root Mean Squared Error (RMSE):", rmse)

    # Return recommended price (example: using first test data point)
    recommended_price = nn_model.predict([X_test_scaled[0]])[0]
    return recommended_price

# Example usage
id = 400
time = "09:00"
date = "24-05-2020"
recommended_price = RecommendPrice(id, data, time, date)
print("Recommended Price:", recommended_price)